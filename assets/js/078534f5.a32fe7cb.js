"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4591],{80245:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"project/2025/daria.gladkykh/index","title":"Smart Station","description":"An ambient-aware music controller built on Raspberry Pi Pico W using embedded Rust.","source":"@site/versioned_docs/version-fils_en/project/2025/daria.gladkykh/index.md","sourceDirName":"project/2025/daria.gladkykh","slug":"/project/2025/daria.gladkykh/","permalink":"/docs/fils_en/project/2025/daria.gladkykh/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-fils_en/project/2025/daria.gladkykh/index.md","tags":[],"version":"fils_en","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Remote Control Turret","permalink":"/docs/fils_en/project/2025/daniel.simpalean/"},"next":{"title":"Posture Monitor","permalink":"/docs/fils_en/project/2025/daria.sanda/"}}');var n=r(74848),t=r(28453);const d={},a="Smart Station",l={},c=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Log",id:"log",level:2},{value:"Week 5 - 11 May",id:"week-5---11-may",level:3},{value:"Week 12 - 18 May",id:"week-12---18-may",level:3},{value:"Week 19 - 25 May",id:"week-19---25-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function o(e){const i={a:"a",admonition:"admonition",br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"smart-station",children:"Smart Station"})}),"\n",(0,n.jsx)(i.p,{children:"An ambient-aware music controller built on Raspberry Pi Pico W using embedded Rust."}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Author"}),": Daria Gladkykh ",(0,n.jsx)(i.br,{}),"\n",(0,n.jsx)(i.strong,{children:"GitHub Project Link"}),": ",(0,n.jsx)(i.a,{href:"https://github.com/UPB-PMRust-Students/project-YrHoup",children:"Smart Station on GitHub"})]})}),"\n",(0,n.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,n.jsx)(i.p,{children:"Smart Station is an IoT music controller that adjusts playback based on ambient light, includes alarm features."}),"\n",(0,n.jsx)(i.h2,{id:"motivation",children:"Motivation"}),"\n",(0,n.jsx)(i.p,{children:"This project was chosen to explore embedded Rust for IoT applications, combining sensor-driven automation with an interactive user interface to create a practical, engaging device."}),"\n",(0,n.jsx)(i.h1,{id:"architecture",children:"Architecture"}),"\n",(0,n.jsx)(i.p,{children:"The Smart Station consists of the following main components:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Sensor Processing"}),":",(0,n.jsx)(i.br,{}),"\n","Handles input from the light sensor (LDR) to detect ambient brightness and trigger actions."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"User Interface"}),":",(0,n.jsx)(i.br,{}),"\n","Integrates an OLED screen configured as an Equalizer display for visual feedback. It also includes a joystick and buttons for music playback control."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Playback Control"}),":",(0,n.jsx)(i.br,{}),"\n","Coordinates music playback from a connected PC, integrating sensor data and user inputs for volume and track control."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Visual Feedback"}),":",(0,n.jsx)(i.br,{}),"\n","Drives an RGB LED to indicate system status and provides music-synced visuals on the OLED Equalizer screen."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Time Management"}),":",(0,n.jsx)(i.br,{}),"\n","Uses LEDs to display time in binary format, utilizing an RTC module for accurate timekeeping.",(0,n.jsx)(i.br,{}),"\n","Additionally, includes a buzzer for periodic alarms (e.g., every 45 minutes) to remind users to take breaks."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Connections"}),":"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"The Sensor Processing component feeds brightness data to the Playback Control."}),"\n",(0,n.jsx)(i.li,{children:"The User Interface sends user commands (play, pause, etc.) to the Playback Control and queries the Time Management for clock/alarm data."}),"\n",(0,n.jsx)(i.li,{children:"The Playback Control updates the Visual Feedback component to reflect playback status."}),"\n",(0,n.jsx)(i.li,{children:"The Time Management component triggers the Playback Control for scheduled alarms."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"System Architecture",src:r(35549).A+"",width:"768",height:"768"})}),"\n",(0,n.jsx)(i.h2,{id:"log",children:"Log"}),"\n",(0,n.jsx)(i.h3,{id:"week-5---11-may",children:"Week 5 - 11 May"}),"\n",(0,n.jsx)(i.p,{children:"What was already done:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Set up Raspberry Pi Pico W with Rust toolchain."}),"\n",(0,n.jsx)(i.li,{children:"Configured GPIO for light sensor and RGB LED."}),"\n",(0,n.jsx)(i.li,{children:"Initial testing of LDR sensor for ambient light detection."}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"week-12---18-may",children:"Week 12 - 18 May"}),"\n",(0,n.jsx)(i.p,{children:"Initially, I planned to use the OLED screen as a standalone control station for the Smart Station. However, I encountered persistent issues with the screen's firmware\u2014specifically, it continuously mirrored all output. Due to these limitations, I decided to repurpose the OLED solely as a visual equalizer display."}),"\n",(0,n.jsx)(i.p,{children:"To achieve this, I used pre-processed audio data (converted into frequency slices using Rust) and mapped it to graphical bars on the OLED screen. I utilized the minifb crate for initial testing and the SSD1306 driver for actual rendering on the screen."}),"\n",(0,n.jsx)(i.p,{children:"I now plan to incorporate binary clocks (using LEDs), a buzzer for periodic reminders, and a joystick with buttons to reintroduce the interactivity that the screen was initially intended to provide."}),"\n",(0,n.jsx)(i.p,{children:"The equalizer has been tested with one audio track and is currently displaying frequency bands accurately. I aim to expand this to support around five compositions, broadening the use case of my Smart Station prototype and enhancing the user experience."}),"\n",(0,n.jsx)(i.h3,{id:"week-19---25-may",children:"Week 19 - 25 May"}),"\n",(0,n.jsx)(i.p,{children:"What I plan to do :"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Finalize playback interaction logic using joystick and buttons."}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Add buzzer functionality with RTC-based scheduling (e.g., every 45 minutes as a reminder)."}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Implement binary clock using LEDs."}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Optimize OLED equalizer display and test with multiple tracks."}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Integrate and test joystick/button controls for volume and track navigation."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"hardware",children:"Hardware"}),"\n",(0,n.jsx)(i.p,{children:"The Smart Station uses a Raspberry Pi Pico W, OLED , light sensor, RGB LED, and RTC module for a responsive music control system."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"Sample of how all will be connected",src:r(19407).A+"",width:"721",height:"1280"})}),"\n",(0,n.jsx)(i.h3,{id:"schematics",children:"Schematics"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"KiCAD schematics",src:r(57682).A+"",width:"1013",height:"623"})}),"\n",(0,n.jsx)(i.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Device"}),(0,n.jsx)(i.th,{children:"Quantity"}),(0,n.jsx)(i.th,{children:"Price (RON)"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://www.optimusdigital.ro/ro/placi-raspberry-pi/13327-raspberry-pi-pico-2-w.html?search_query=pico+2w&results=33",children:"Raspberry Pi Pico W"})}),(0,n.jsx)(i.td,{children:"3"}),(0,n.jsx)(i.td,{children:"120"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://www.emag.ro/display-tft-spi-2-4-inch-240x320-lcd-cu-touchscreen-driver-st7789v-arduino-emg178/pd/DXZMBSYBM/?ref=history-shopping_420684583_221614_1",children:"TFT SPI Display ST7789V"})}),(0,n.jsx)(i.td,{children:"1"}),(0,n.jsx)(i.td,{children:"70"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://www.sparkfun.com/products/9088",children:"Light sensor (LDR)"})}),(0,n.jsx)(i.td,{children:"1"}),(0,n.jsx)(i.td,{children:"10"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://www.emag.ro/set-componente-electronice-breadboard-830-puncte-led-uri-compatibil-arduino-si-raspberry-pi-zz00044/pd/DRXG4XYBM/?ref=history-shopping_416665605_197770_1",children:"Kit with LEDs, buttons, etc."})}),(0,n.jsx)(i.td,{children:"1"}),(0,n.jsx)(i.td,{children:"60"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://www.adafruit.com/product/159",children:"RGB LED"})}),(0,n.jsx)(i.td,{children:"1"}),(0,n.jsx)(i.td,{children:"5"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://www.adafruit.com/product/1956",children:"Jumper wires (various sets)"})}),(0,n.jsx)(i.td,{children:"1"}),(0,n.jsx)(i.td,{children:"40"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://www.optimusdigital.ro/",children:"Breadboards"})}),(0,n.jsx)(i.td,{children:"3"}),(0,n.jsx)(i.td,{children:"35"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.strong,{children:"Total"})}),(0,n.jsx)(i.td,{}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.strong,{children:"340 RON"})})]})]})]}),"\n",(0,n.jsx)(i.h2,{id:"software",children:"Software"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Library"}),(0,n.jsx)(i.th,{children:"Description"}),(0,n.jsx)(i.th,{children:"Usage"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal"})}),(0,n.jsx)(i.td,{children:"Hardware abstraction layer"}),(0,n.jsx)(i.td,{children:"Interfaces for GPIO, ADC, I2C, SPI"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://github.com/rp-rs/rp2040-hal",children:"rp2040-hal"})}),(0,n.jsx)(i.td,{children:"RP2040-specific HAL"}),(0,n.jsx)(i.td,{children:"Low-level Pico W peripheral access"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://github.com/jamwaffles/ssd1306",children:"ssd1306"})}),(0,n.jsx)(i.td,{children:"OLED display driver"}),(0,n.jsx)(i.td,{children:"Renders UI on SSD1306 OLED"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://crates.io/crates/ds3231",children:"ds3231"})}),(0,n.jsx)(i.td,{children:"RTC module driver"}),(0,n.jsx)(i.td,{children:"Timekeeping and alarm functionality"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://github.com/rust-embedded/fugit",children:"fugit"})}),(0,n.jsx)(i.td,{children:"Time-keeping utility"}),(0,n.jsx)(i.td,{children:"Precise timing for RTC and alarms"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://github.com/embedded-graphics/embedded-graphics",children:"embedded-graphics"})}),(0,n.jsx)(i.td,{children:"2D graphics library"}),(0,n.jsx)(i.td,{children:"Draws UI elements on OLED"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://github.com/golemparts/rppal",children:"rppal"})}),(0,n.jsx)(i.td,{children:"Raspberry Pi Peripheral Access"}),(0,n.jsx)(i.td,{children:"GPIO and sensor communication"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"https://github.com/rust-embedded/cortex-m-rt",children:"cortex-m-rt"})}),(0,n.jsx)(i.td,{children:"ARM Cortex-M runtime"}),(0,n.jsx)(i.td,{children:"Interrupt handling and scheduling"})]})]})]}),"\n",(0,n.jsx)(i.h2,{id:"links",children:"Links"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"https://docs.rust-embedded.org/book/",children:"Rust Embedded Book"})," - Guide for embedded Rust development."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"https://www.raspberrypi.com/documentation/microcontrollers/",children:"Raspberry Pi Pico W Documentation"})," - Official Pico W reference."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"https://docs.rs/embedded-graphics/",children:"Embedded Graphics Documentation"})," - Resource for UI rendering."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"https://probe.rs/",children:"Probe-rs"})," - Tooling for flashing and debugging Rust firmware."]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},57682:(e,i,r)=>{r.d(i,{A:()=>s});const s=r.p+"assets/images/ElectricScheme-e14e660f82a2fefc1b0190e3ecd5bd38.webp"},35549:(e,i,r)=>{r.d(i,{A:()=>s});const s=r.p+"assets/images/architecture-95a2095bde4eeb9e0f6125632624b579.webp"},19407:(e,i,r)=>{r.d(i,{A:()=>s});const s=r.p+"assets/images/hardware_ph-3b9628fa03668f32bbfc47f5a7c3b769.webp"},28453:(e,i,r)=>{r.d(i,{R:()=>d,x:()=>a});var s=r(96540);const n={},t=s.createContext(n);function d(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);