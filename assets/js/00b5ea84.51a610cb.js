"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9322],{47933:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"project/2025/madalina.andronache/index","title":"Morse Coder","description":"Converts typed text into Morse code signals (LEDs, buzzer, LCD).","source":"@site/versioned_docs/version-acs_cc/project/2025/madalina.andronache/index.md","sourceDirName":"project/2025/madalina.andronache","slug":"/project/2025/madalina.andronache/","permalink":"/docs/acs_cc/project/2025/madalina.andronache/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-acs_cc/project/2025/madalina.andronache/index.md","tags":[],"version":"acs_cc","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Weather Window","permalink":"/docs/acs_cc/project/2025/lavinia.tudor0603/"},"next":{"title":"Digital Touch Piano","permalink":"/docs/acs_cc/project/2025/mara_claudia.oprea/"}}');var i=s(74848),r=s(28453);const d={},l="Morse Coder",c={},a=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Log",id:"log",level:2},{value:"Week 28 - 4 May",id:"week-28---4-may",level:3},{value:"Week 5 - 11 May",id:"week-5---11-may",level:3},{value:"Week 12 - 18 May",id:"week-12---18-may",level:3},{value:"Week 19 - 25 May",id:"week-19---25-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Photos",id:"photos",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function o(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"morse-coder",children:"Morse Coder"})}),"\n",(0,i.jsx)(t.p,{children:"Converts typed text into Morse code signals (LEDs, buzzer, LCD)."}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.mdxAdmonitionTitle,{}),(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Author"}),": Andronache Madalina-Georgiana ",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"GitHub Project Link"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/UPB-PMRust-Students/proiect-madalinaandronache.git",children:"Project Repository"})]})]}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(t.p,{children:"This project enables the user to input text using a 4x4 matrix keypad, which is then converted into Morse code and transmitted through:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Sound signals"})," using a buzzer."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Light signals"})," using LEDs."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Visual display"})," on an LCD screen, where dots and dashes represent Morse code."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Ultimately, the aim is to integrate all components inside a compact system."}),"\n",(0,i.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(t.p,{children:"This project was chosen because it combines both hardware and software aspects in a manageable way. Developing a text-to-Morse converter offers an opportunity to better understand:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"GPIO management"}),"\n",(0,i.jsx)(t.li,{children:"Embedded Rust programming"}),"\n",(0,i.jsx)(t.li,{children:"Hardware-software interactions"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"It allows practicing embedded programming without requiring complex electronics knowledge."}),"\n",(0,i.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(t.p,{children:"The following diagram shows the system architecture:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"System Architecture Diagram",src:s(78337).A+"",width:"1920",height:"1080"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Raspberry Pi Pico 2W"})," acts as the brain of the system, coordinating all interactions between input and output components."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.strong,{children:"4x4 matrix keypad"})," provides the user input."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.strong,{children:"Pico"})," processes the text and converts it into Morse code."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.strong,{children:"LEDs"})," and ",(0,i.jsx)(t.strong,{children:"buzzer"})," output the corresponding Morse signals."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.strong,{children:"LCD screen"})," displays the Morse code in real time using dots (.) and dashes (_)."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"log",children:"Log"}),"\n",(0,i.jsx)(t.h3,{id:"week-28---4-may",children:"Week 28 - 4 May"}),"\n",(0,i.jsx)(t.p,{children:"Initially, I encountered problems connecting the Raspberry Pi Pico 2W to the debugger."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem"}),": Using jumper wires for the SWD connection resulted in an ",(0,i.jsx)(t.strong,{children:"unstable link"})," between the Pico and the debugger, causing random disconnections and flashing failures due to loose connections."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Solution"}),": I soldered stable male pins onto the Pico board and also reinforced the jumper cable connections by using more secure, stable headers, preventing movement and improving overall connection stability during debugging."]}),"\n",(0,i.jsxs)(t.p,{children:["After stabilizing the programming connection, I focused on testing each hardware component individually to understand their behavior and determine the necessary Rust crates for the project.",(0,i.jsx)(t.br,{}),"\n","This phase involved experimenting with:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Raspberry Pi Pico 2W setup,"}),"\n",(0,i.jsx)(t.li,{children:"4x4 matrix keypad integration,"}),"\n",(0,i.jsx)(t.li,{children:"LEDs and buzzer control,"}),"\n",(0,i.jsx)(t.li,{children:"LCD 1602 screen functionality."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"While working with the LCD 1602, I initially encountered display issues."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem"}),": The display showed no visible characters, and I suspected a software communication error (wrong crate usage or I2C misconfiguration)."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Solution"}),": After careful troubleshooting, I discovered that the issue was actually ",(0,i.jsx)(t.strong,{children:"hardware-related"}),": the ",(0,i.jsx)(t.strong,{children:"contrast potentiometer"})," on the back of the LCD module needed adjustment."]}),"\n",(0,i.jsx)(t.p,{children:"Once the potentiometer was properly tuned, the LCD correctly displayed characters."}),"\n",(0,i.jsx)(t.p,{children:"During LED testing, another issue occurred."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem"}),": I accidentally burned two LEDs. The initially purchased red LEDs were rated for ",(0,i.jsx)(t.strong,{children:"2.1V\u20132.4V forward voltage"}),", but I mistakenly powered them directly without using an appropriate resistor, which led to their failure."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Solution"}),": This helped me realize the importance of properly calculating and setting up voltage/current protection for LEDs."]}),"\n",(0,i.jsx)(t.p,{children:"In parallel with the hardware experiments, I also started writing the initial documentation for the project. I structured the project description, architecture, hardware and software components sections, and started outlining the weekly activity logs."}),"\n",(0,i.jsx)(t.h3,{id:"week-5---11-may",children:"Week 5 - 11 May"}),"\n",(0,i.jsx)(t.p,{children:"I again encountered issues with the connection between the Raspberry Pi Pico 2W and the debugger."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Problem"}),": The thin jumper wires used initially were unreliable and caused occasional flashing failures or disconnections during programming \u2014 this was mainly due to ",(0,i.jsx)(t.strong,{children:"transporting the project between home and university"}),", which led to unstable mechanical connections."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Solution"}),": I replaced them with ",(0,i.jsx)(t.strong,{children:"thicker, high-quality cables"}),", which provided much better physical contact and stability. This resolved all connection issues."]}),"\n",(0,i.jsxs)(t.p,{children:["In parallel, I finalized the ",(0,i.jsx)(t.strong,{children:"pin mapping"})," between the Pico board and each component (keypad, LCD, LEDs, and buzzer), ensuring proper physical layout and consistency for both coding and schematic design."]}),"\n",(0,i.jsx)(t.h3,{id:"week-12---18-may",children:"Week 12 - 18 May"}),"\n",(0,i.jsx)(t.p,{children:"I wrote a minimal Rust test program to verify that all hardware components were correctly connected and functional."}),"\n",(0,i.jsx)(t.p,{children:"While working with LEDs, I re-evaluated the need for current-limiting resistors."}),"\n",(0,i.jsx)(t.p,{children:"Problem: Although I had already burned two LEDs earlier, I realized that even if the GPIO pins seem to work, long-term use without protection may damage the Pico board."}),"\n",(0,i.jsx)(t.p,{children:"Solution: I add resistors in series with each LED, and update the schematic accordingly."}),"\n",(0,i.jsx)(t.p,{children:"I also worked in KiCad, continuing the design of the schematic. I included headers for all external modules (keypad, LCD, buzzer, LEDs), and clearly labeled all connections between components and the microcontroller. I ensured that each symbol had the correct electrical type (Input/Output/Power) and verified the pin orientation for modules like the keypad and LCD."}),"\n",(0,i.jsx)(t.p,{children:"In addition, I had to go shopping for a suitable enclosure to house the final version of the project."}),"\n",(0,i.jsx)(t.h3,{id:"week-19---25-may",children:"Week 19 - 25 May"}),"\n",(0,i.jsx)(t.h2,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Component"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Purpose"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Function"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Raspberry Pi Pico 2W"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Main controller of the system"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Reads input text, processes it, and controls outputs to buzzer, LEDs, and LCD"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"4x4 Matrix Keypad"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Provides text input"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Acts as the input device for entering characters"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Active Buzzer"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Outputs Morse code through sound"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Emits short and long beeps representing dots and dashes"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"LEDs"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Visual representation of Morse code signals"}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["- When a dot (.) is detected, only ",(0,i.jsx)(t.strong,{children:"one LED"})," lights up (the middle one).",(0,i.jsx)("br",{}),"- When a dash (_) is detected, ",(0,i.jsx)(t.strong,{children:"all three LEDs"})," light up simultaneously."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"LCD Display"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Displays the Morse code translation"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Shows real-time dot and dash output"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Breadboard + Jumper Wires"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Temporary prototyping connections"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Connects components to the Raspberry Pi Pico during development"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"schematics",children:"Schematics"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Schematics",src:s(28724).A+"",width:"1123",height:"794"})}),"\n",(0,i.jsx)(t.h3,{id:"photos",children:"Photos"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{alt:"Picture 3",src:s(96318).A+"",width:"1024",height:"768"}),"\n",(0,i.jsx)(t.img,{alt:"Picture 1",src:s(27676).A+"",width:"768",height:"1024"}),"\n",(0,i.jsx)(t.img,{alt:"Picture 2",src:s(7353).A+"",width:"768",height:"1024"})]}),"\n",(0,i.jsx)(t.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Device"}),(0,i.jsx)(t.th,{children:"Usage"}),(0,i.jsx)(t.th,{children:"Price (RON)"}),(0,i.jsx)(t.th,{children:"Quantity"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.ardumarket.ro/ro/product/mb102-830-puncte-fara-lipire-breadboard?gad_source=1&gad_campaignid=22143406947&gbraid=0AAAAA-sic2S12h5YpZvxubae_KFo2O8sn&gclid=CjwKCAjw56DBBhAkEiwAaFsG-jhLz8nRj2WqLYTwF9vHXVysTlAxFiA3vGKmZ9Itg0CHqfYx6FJk5xoC_NMQAvD_BwE",children:"Breadboard HQ (830 points)"})}),(0,i.jsx)(t.td,{children:"Prototyping, connecting components"}),(0,i.jsx)(t.td,{children:"9,98"}),(0,i.jsx)(t.td,{children:"1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/wires-with-connectors/12-breadboard-jumper-wire-set.html?search_query=Breadboard+Jumper+Wires+Set&results=22",children:"Breadboard Jumper Wires Set"})}),(0,i.jsx)(t.td,{children:"Wiring between breadboard and Pico"}),(0,i.jsx)(t.td,{children:"7,99"}),(0,i.jsx)(t.td,{children:"1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/leds/29-5-mm-red-led-with-difused-lens.html?search_query=5+mm+Red+LED+with+Diffused+Lens&results=9",children:"5mm Red LED with Diffused Lens"})}),(0,i.jsx)(t.td,{children:"Visual Morse code signaling"}),(0,i.jsx)(t.td,{children:"0,39"}),(0,i.jsx)(t.td,{children:"7"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/breadboards/44-400p-hq-breadboard.html?search_query=400p+HQ+Breadboard&results=6",children:"400p HQ Breadboard"})}),(0,i.jsx)(t.td,{children:"Additional prototyping area"}),(0,i.jsx)(t.td,{children:"4,56"}),(0,i.jsx)(t.td,{children:"1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/touch-sensors/470-4x4-matrix-keyboard-with-female-pin-connector.html?search_query=4x4+Matrix+Keyboard+with+Female+Pin+Connector&results=1",children:"4x4 Matrix Keypad"})}),(0,i.jsx)(t.td,{children:"Input device for typing text"}),(0,i.jsx)(t.td,{children:"6,99"}),(0,i.jsx)(t.td,{children:"1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/lcds/2894-1602-lcd-with-i2c-interface-and-blue-backlight.html?search_query=1602+LCD+with+I2C+Interface+and+Blue+Backlight&results=2",children:"1602 LCD with I2C Interface and Blue Backlight"})}),(0,i.jsx)(t.td,{children:"Display Morse translation"}),(0,i.jsx)(t.td,{children:"16,34"}),(0,i.jsx)(t.td,{children:"1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"hhttps://www.optimusdigital.ro/en/buzzers/12513-pcb-mounted-active-buzzer-module.html?search_query=PCB+Mounted+Active+Buzzer+Module&results=1",children:"PCB Mounted Active Buzzer Module"})}),(0,i.jsx)(t.td,{children:"Alternate sound module for Morse"}),(0,i.jsx)(t.td,{children:"4,98"}),(0,i.jsx)(t.td,{children:"1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"http://optimusdigital.ro/en/raspberry-pi-boards/13327-raspberry-pi-pico-2-w.html?search_query=Raspberry+Pi+Pico+2W&results=36",children:"Raspberry Pi Pico 2W"})}),(0,i.jsx)(t.td,{children:"Main microcontroller"}),(0,i.jsx)(t.td,{children:"39,66"}),(0,i.jsx)(t.td,{children:"2"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.tme.eu/en/details/cf1_4w-150r/tht-resistors/sr-passives/",children:"150\u03a9 Resistor"})}),(0,i.jsx)(t.td,{children:"Current limiting for LEDs"}),(0,i.jsx)(t.td,{children:"Already had them"}),(0,i.jsx)(t.td,{children:"3"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Total"})}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"131,11"})}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"software",children:"Software"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Library"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Usage in your code"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-rp"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"HAL for Raspberry Pi Pico W"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Used for I2C interface, peripheral initialization"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-executor"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Asynchronous task runtime"}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Used for ",(0,i.jsx)(t.code,{children:"#[embassy_executor::main]"})," and async tasks"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-time"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Asynchronous timers and delays"}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Used for ",(0,i.jsx)(t.code,{children:"Timer::after()"})," non-blocking delays"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://crates.io/crates/lcd1602_driver",children:"lcd1602_driver"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Driver for controlling LCD1602 over I2C"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Used for initializing and writing text to the LCD"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://github.com/knurling-rs/defmt",children:"defmt"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Lightweight embedded logging"}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Used for debug prints (",(0,i.jsx)(t.code,{children:"defmt::info!"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://github.com/knurling-rs/defmt",children:"defmt-rtt"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["RTT transport for ",(0,i.jsx)(t.code,{children:"defmt"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Sends logs to the host"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://github.com/knurling-rs/defmt",children:"panic-probe"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Panic handler for embedded targets"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Handles panics and sends diagnostic info"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Traits for I2C, GPIO and delays"}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Used indirectly via ",(0,i.jsx)(t.code,{children:"embassy-rp"})," and ",(0,i.jsx)(t.code,{children:"lcd1602_driver"})]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"links",children:"Links"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.instructables.com/Raspberry-Pi-Pico-4x4-Matrix-Keypad-and-1602-LCD-I/",children:"4x4 Matrix Keypad Integration with Raspberry Pi Pico"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=bXLgxEcT1QU&t=2s&ab_channel=NerdCave",children:"1602 LCD with I2C Interface with Raspberry Pi Pico"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.alexdwilson.dev/how-to-program-raspberry-pi-pico-with-rust",children:"Rust Programming Guide for Raspberry Pi Pico"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"..."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},78337:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/diagram-49bdac9fc309717bf5cbcd8b426d6949.svg"},27676:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/pm1-f05b9cf1b74433a9792c5bd8cbaf9150.webp"},7353:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/pm2-878f2f6b05de781806daa301e2d202be.webp"},96318:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/pm3-328db052eec61836f7ec01c71e259cec.webp"},28724:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/schematics-ddfa225a41d29d3b74ccbafb9922befd.svg"},28453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>l});var n=s(96540);const i={},r=n.createContext(i);function d(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);